---
export interface Props {
  id: string;
  title: string;
  subtitle: string;
  content: {
    sections: Array<{
      title: string;
      items?: Array<{
        title: string;
        description: string;
        bullets?: string[];
      }>;
      description?: string;
      bullets?: string[];
    }>;
    approach?: Array<{
      title: string;
      description: string;
    }>;
    whyChoose?: string;
    cta: string;
  };
}

const { id, title, subtitle, content } = Astro.props;
---

<!-- Modal -->
<div
  id={id}
  class="hs-overlay hidden size-full fixed top-0 start-0 z-[80] overflow-x-hidden overflow-y-hidden pointer-events-none modal-backdrop"
  role="dialog"
  tabindex="-1"
  aria-labelledby={`${id}-label`}
>
  <!-- Enhanced Backdrop -->
  <div class="absolute inset-0 bg-black/60 backdrop-blur-md">
    <!-- Subtle Pattern Overlay -->
    <div class="absolute inset-0 opacity-[0.02]">
      <svg class="w-full h-full" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <pattern id="modal-pattern" x="0" y="0" width="10" height="10" patternUnits="userSpaceOnUse">
            <circle cx="5" cy="5" r="0.5" fill="white"/>
          </pattern>
        </defs>
        <rect width="100%" height="100%" fill="url(#modal-pattern)"/>
      </svg>
    </div>
  </div>

  <div class="hs-overlay-open:mt-7 hs-overlay-open:opacity-100 hs-overlay-open:duration-700 hs-overlay-open:scale-100 mt-0 opacity-0 scale-90 ease-out transition-all sm:max-w-5xl sm:w-full m-3 sm:mx-auto relative z-10 flex items-center justify-center min-h-full py-4">
    <div class="flex flex-col bg-white border-2 border-gray-100 shadow-2xl rounded-2xl pointer-events-auto dark:bg-neutral-800 dark:border-neutral-600 dark:shadow-neutral-900/70 relative overflow-hidden max-h-[90vh] w-full">
      <!-- Enhanced Background with Gradient -->
      <div class="absolute inset-0 bg-gradient-to-br from-gray-50/50 via-orange-50/20 to-yellow-50/30 dark:from-neutral-800/50 dark:via-neutral-700/30 dark:to-neutral-800/50"></div>
      
      <!-- Decorative Top Border -->
      <div class="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-[#D89D40] via-[#FE9002] to-[#D89D40]"></div>
      <!-- Enhanced Header -->
      <div class="relative py-6 px-8 border-b border-gray-200/50 dark:border-neutral-600/50">
        <!-- Header Background -->
        <div class="absolute inset-0 bg-gradient-to-r from-white via-orange-50/40 to-yellow-50/30 dark:from-neutral-800 dark:via-neutral-700/50 dark:to-neutral-800"></div>
        
        <!-- Decorative Elements -->
        <div class="absolute top-2 right-8 w-20 h-20 bg-gradient-to-br from-[#D89D40]/5 to-[#FE9002]/5 rounded-full blur-xl"></div>
        <div class="absolute bottom-2 left-8 w-16 h-16 bg-gradient-to-br from-[#FE9002]/5 to-[#D89D40]/5 rounded-full blur-lg"></div>
        
        <div class="relative flex justify-between items-center">
          <div class="flex items-center gap-4">
            <!-- Enhanced Icon -->
            <div class="flex items-center justify-center w-12 h-12 bg-gradient-to-br from-[#D89D40] to-[#FE9002] rounded-xl shadow-lg">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
            
            <div>
              <h3 id={`${id}-label`} class="text-2xl font-bold text-gray-800 dark:text-white mb-1">
                {title}
              </h3>
              <div class="w-16 h-0.5 bg-gradient-to-r from-[#D89D40] to-[#FE9002] rounded-full"></div>
            </div>
          </div>
          
          <!-- Enhanced Close Button -->
          <button
            type="button"
            class="group size-10 inline-flex justify-center items-center rounded-xl border border-gray-200 bg-white/80 backdrop-blur-sm text-gray-600 hover:bg-red-50 hover:border-red-200 hover:text-red-600 focus:outline-none focus:bg-red-50 focus:border-red-200 focus:text-red-600 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-700/80 dark:border-neutral-600 dark:hover:bg-red-900/20 dark:hover:border-red-800 dark:text-neutral-400 dark:hover:text-red-400 dark:focus:bg-red-900/20 dark:focus:border-red-800 dark:focus:text-red-400 transition-all duration-200 shadow-sm hover:shadow-md"
            aria-label="Close"
            data-hs-overlay={`#${id}`}
          >
            <span class="sr-only">Close</span>
            <svg class="shrink-0 size-4 group-hover:scale-110 transition-transform duration-200" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="m18 6-12 12"></path>
              <path d="m6 6 12 12"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Enhanced Body -->
      <div class="relative p-8 modal-content-scroll max-h-[calc(90vh-200px)] overflow-y-auto">
        <!-- Enhanced Subtitle -->
        <div class="mb-8 p-4 bg-gradient-to-r from-orange-50/50 to-yellow-50/30 dark:from-neutral-700/30 dark:to-neutral-800/30 rounded-xl border border-orange-100/50 dark:border-neutral-600/30">
          <p class="text-gray-700 dark:text-neutral-300 text-lg leading-relaxed">
            {subtitle}
          </p>
        </div>

        <!-- Main Content Sections -->
        {content.sections.map((section, sectionIndex) => (
          <div class="mb-10">
            <!-- Section Header -->
            <div class="flex items-center gap-3 mb-6">
              <div class="w-8 h-8 bg-gradient-to-br from-[#FE9002] to-[#FE9002] rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h4 class="text-2xl font-bold text-gray-800 dark:text-white">
                {section.title}
              </h4>
            </div>
            
            {section.description && (
              <p class="text-gray-600 dark:text-neutral-400 mb-6 text-lg leading-relaxed">
                {section.description}
              </p>
            )}

            {section.bullets && (
              <ul class="space-y-3 mb-6">
                {section.bullets.map((bullet) => (
                  <li class="flex items-start group">
                    <div class="shrink-0 w-6 h-6 bg-gradient-to-br from-[#FE9002] to-[#FE9002] rounded-full flex items-center justify-center mt-0.5 mr-3">
                      <svg class="size-3 text-white" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M20 6 9 17l-5-5"></path>
                      </svg>
                    </div>
                    <span class="text-gray-700 dark:text-neutral-300 group-hover:text-gray-900 dark:group-hover:text-neutral-100 transition-colors">
                      {bullet}
                    </span>
                  </li>
                ))}
              </ul>
            )}

            {section.items && (
              <div class="space-y-6">
                {section.items.map((item, itemIndex) => (
                  <div class="bg-white/50 dark:bg-neutral-800/30 rounded-xl p-6 border border-gray-100 dark:border-neutral-700/50 hover:shadow-lg hover:border-[#FE9002]/20 dark:hover:border-[#FE9002]/20 transition-all duration-300">
                    <!-- Item Header -->
                    <div class="flex items-start gap-3 mb-3">
                      <div class="shrink-0 w-2 h-12 bg-gradient-to-b from-[#FE9002] to-[#FE9002] rounded-full"></div>
                      <div class="flex-1">
                        <h5 class="text-lg font-bold text-gray-800 dark:text-white mb-2">
                          {item.title}
                        </h5>
                        <p class="text-gray-600 dark:text-neutral-400 leading-relaxed">
                          {item.description}
                        </p>
                      </div>
                    </div>
                    
                    {item.bullets && (
                      <ul class="space-y-2 mt-4 ml-5">
                        {item.bullets.map((bullet) => (
                          <li class="flex items-start">
                            <div class="shrink-0 w-1.5 h-1.5 bg-[#FE9002] rounded-full mt-2.5 mr-3"></div>
                            <span class="text-sm text-gray-600 dark:text-neutral-400 leading-relaxed">
                              {bullet}
                            </span>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                ))}
              </div>
            )}
            
            <!-- Section Divider -->
            {sectionIndex < content.sections.length - 1 && (
              <div class="mt-8 flex items-center">
                <div class="flex-1 h-px bg-gradient-to-r from-transparent via-gray-200 to-transparent dark:via-neutral-600"></div>
                <div class="px-4">
                  <div class="w-2 h-2 bg-gradient-to-br from-[#FE9002] to-[#FE9002] rounded-full"></div>
                </div>
                <div class="flex-1 h-px bg-gradient-to-r from-transparent via-gray-200 to-transparent dark:via-neutral-600"></div>
              </div>
            )}
          </div>
        ))}

        <!-- Enhanced Our Approach Section -->
        {content.approach && (
          <div class="mb-10">
            <!-- Approach Header -->
            <div class="flex items-center gap-3 mb-8">
              <div class="w-8 h-8 bg-gradient-to-br from-[#D89D40] to-[#FE9002] rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
              </div>
              <h4 class="text-2xl font-bold text-gray-800 dark:text-white">
                Our Approach
              </h4>
            </div>
            
            <div class="space-y-6">
              {content.approach.map((step, index) => (
                <div class="flex items-start group">
                  <div class="shrink-0 w-12 h-12 bg-gradient-to-br from-[#D89D40] to-[#FE9002] text-white rounded-xl flex items-center justify-center font-bold text-lg mr-6 shadow-lg group-hover:scale-110 transition-transform duration-300">
                    {index + 1}
                  </div>
                  <div class="flex-1 bg-white/50 dark:bg-neutral-800/30 rounded-xl p-6 border border-gray-100 dark:border-neutral-700/50 group-hover:shadow-lg group-hover:border-[#D89D40]/20 dark:group-hover:border-[#FE9002]/20 transition-all duration-300">
                    <h5 class="text-lg font-bold text-gray-800 dark:text-white mb-2">
                      {step.title}
                    </h5>
                    <p class="text-gray-600 dark:text-neutral-400 leading-relaxed">
                      {step.description}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Enhanced Why Choose Section -->
        {content.whyChoose && (
          <div class="mb-8 relative">
            <!-- Background -->
            <div class="absolute inset-0 bg-gradient-to-br from-[#D89D40]/5 via-orange-50/50 to-[#FE9002]/5 dark:from-[#FE9002]/5 dark:via-neutral-700/30 dark:to-[#D89D40]/5 rounded-2xl"></div>
            
            <!-- Content -->
            <div class="relative p-8 border border-[#D89D40]/20 dark:border-[#FE9002]/20 rounded-2xl">
              <!-- Header -->
              <div class="flex items-center gap-3 mb-6">
                <div class="w-8 h-8 bg-gradient-to-br from-[#D89D40] to-[#FE9002] rounded-lg flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
                  </svg>
                </div>
                <h4 class="text-2xl font-bold text-gray-800 dark:text-white">
                  Why Choose Trade Guild Consulting?
                </h4>
              </div>
              
              <p class="text-gray-700 dark:text-neutral-300 text-lg leading-relaxed">
                {content.whyChoose}
              </p>
            </div>
          </div>
        )}
      </div>

      <!-- Enhanced Footer -->
      <div class="relative px-8 py-6 border-t border-gray-200/50 dark:border-neutral-600/50">
        <!-- Footer Background -->
        <div class="absolute inset-0 bg-gradient-to-r from-gray-50/30 to-orange-50/20 dark:from-neutral-800/30 dark:to-neutral-700/20"></div>
        
        <div class="relative flex justify-between items-center">
          <!-- Left Side - Info -->
          <div class="flex items-center gap-2 text-sm text-gray-600 dark:text-neutral-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Ready to get started?</span>
          </div>
          
          <!-- Right Side - Actions -->
          <div class="flex items-center gap-3">
            <button
              type="button"
              class="group py-3 px-6 inline-flex items-center gap-x-2 text-sm font-medium rounded-xl border border-gray-200 bg-white/80 backdrop-blur-sm text-gray-700 shadow-sm hover:bg-gray-50 hover:border-gray-300 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:bg-gray-50 focus:border-gray-300 dark:bg-neutral-700/80 dark:border-neutral-600 dark:text-neutral-300 dark:hover:bg-neutral-700 dark:hover:border-neutral-500 dark:focus:bg-neutral-700 dark:focus:border-neutral-500 transition-all duration-200"
              data-hs-overlay={`#${id}`}
            >
              <svg class="shrink-0 size-4 group-hover:scale-110 transition-transform duration-200" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="m18 6-12 12"></path>
                <path d="m6 6 12 12"></path>
              </svg>
              Close
            </button>
            
            <a
              href="/contact"
              class="group py-3 px-8 inline-flex items-center gap-x-2 text-sm font-semibold rounded-xl border border-transparent bg-gradient-to-r from-[#D89D40] to-[#FE9002] text-white shadow-lg hover:shadow-xl hover:shadow-[#D89D40]/25 dark:hover:shadow-[#FE9002]/25 hover:scale-105 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:scale-105 transition-all duration-300"
            >
              {content.cta}
              <svg class="shrink-0 size-4 group-hover:translate-x-1 transition-transform duration-300" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="m9 18 6-6-6-6"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Initialize Preline modal functionality
  import { HSOverlay } from 'preline/preline';
  
  document.addEventListener('DOMContentLoaded', () => {
    HSOverlay.autoInit();
    
    // Get all modal elements
    const modals = document.querySelectorAll('[id^="business-consulting"], [id^="digital-marketing"], [id^="seo-services"], [id^="social-media"]');
    
    // Store original scroll position and state
    let scrollPosition = 0;
    let isModalOpen = false;
    
    // Complete scroll lock implementation
    function lockScroll() {
      if (isModalOpen) return;
      
      isModalOpen = true;
      scrollPosition = window.pageYOffset;
      
      // Set global modal state
      if (typeof window !== 'undefined') {
        (window as any).modalOpen = true;
      }
      
      // Destroy Lenis completely
      if (typeof window !== 'undefined' && (window as any).destroyLenis) {
        (window as any).destroyLenis();
      }
      
      // Apply comprehensive scroll lock
      const html = document.documentElement;
      const body = document.body;
      
      // Store original styles
      const originalHtmlOverflow = html.style.overflow;
      const originalBodyOverflow = body.style.overflow;
      const originalBodyPosition = body.style.position;
      const originalBodyTop = body.style.top;
      const originalBodyWidth = body.style.width;
      
      // Apply lock styles
      html.style.overflow = 'hidden';
      body.style.overflow = 'hidden';
      body.style.position = 'fixed';
      body.style.top = `-${scrollPosition}px`;
      body.style.width = '100%';
      body.classList.add('modal-open');
      
      // Store original styles for restoration
      (window as any).originalScrollStyles = {
        htmlOverflow: originalHtmlOverflow,
        bodyOverflow: originalBodyOverflow,
        bodyPosition: originalBodyPosition,
        bodyTop: originalBodyTop,
        bodyWidth: originalBodyWidth
      };
      
      // Prevent all scroll events at window level
      const preventScroll = (e: Event) => {
        const target = e.target as HTMLElement;
        const modalContent = target.closest('.modal-content-scroll');
        
        if (!modalContent) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
      };
      
      // Add event listeners with highest priority
      window.addEventListener('wheel', preventScroll, { passive: false, capture: true });
      window.addEventListener('touchmove', preventScroll, { passive: false, capture: true });
      window.addEventListener('scroll', preventScroll, { passive: false, capture: true });
      window.addEventListener('keydown', (e: KeyboardEvent) => {
        // Prevent scroll keys
        if ([32, 33, 34, 35, 36, 37, 38, 39, 40].includes(e.keyCode)) {
          const target = e.target as HTMLElement;
          const modalContent = target.closest('.modal-content-scroll');
          if (!modalContent) {
            e.preventDefault();
            e.stopImmediatePropagation();
            return false;
          }
        }
      }, { passive: false, capture: true });
      
      // Store cleanup function
      (window as any).scrollCleanup = () => {
        window.removeEventListener('wheel', preventScroll, { capture: true });
        window.removeEventListener('touchmove', preventScroll, { capture: true });
        window.removeEventListener('scroll', preventScroll, { capture: true });
      };
    }
    
    function unlockScroll() {
      if (!isModalOpen) return;
      
      isModalOpen = false;
      
      // Set global modal state
      if (typeof window !== 'undefined') {
        (window as any).modalOpen = false;
      }
      
      // Clean up event listeners
      if (typeof window !== 'undefined' && (window as any).scrollCleanup) {
        (window as any).scrollCleanup();
        (window as any).scrollCleanup = null;
      }
      
      // Restore original styles
      const html = document.documentElement;
      const body = document.body;
      
      if (typeof window !== 'undefined' && (window as any).originalScrollStyles) {
        const styles = (window as any).originalScrollStyles;
        html.style.overflow = styles.htmlOverflow;
        body.style.overflow = styles.bodyOverflow;
        body.style.position = styles.bodyPosition;
        body.style.top = styles.bodyTop;
        body.style.width = styles.bodyWidth;
        body.classList.remove('modal-open');
        
        (window as any).originalScrollStyles = null;
      }
      
      // Restore scroll position
      window.scrollTo(0, scrollPosition);
      
      // Reinitialize Lenis
      setTimeout(() => {
        if (typeof window !== 'undefined' && (window as any).initLenis) {
          (window as any).initLenis();
        }
      }, 100);
    }
    
    modals.forEach(modal => {
      // Use MutationObserver to detect modal state changes
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const target = mutation.target as HTMLElement;
            
            if (target.classList.contains('hs-overlay-open')) {
              // Modal opened
              setTimeout(() => lockScroll(), 50);
            } else if (target.classList.contains('hidden')) {
              // Modal closed
              setTimeout(() => unlockScroll(), 50);
            }
          }
        });
      });
      
      // Start observing
      observer.observe(modal, {
        attributes: true,
        attributeFilter: ['class']
      });
      
      // Handle backdrop click to close
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          if (typeof window !== 'undefined' && (window as any).HSStaticMethods && (window as any).HSStaticMethods.HSOverlay) {
            (window as any).HSStaticMethods.HSOverlay.close(modal);
          }
        }
      });
      
      // Ensure modal content can scroll
      const modalContent = modal.querySelector('.modal-content-scroll');
      if (modalContent) {
        modalContent.addEventListener('wheel', (e) => {
          e.stopPropagation();
        });
        modalContent.addEventListener('touchmove', (e) => {
          e.stopPropagation();
        });
      }
    });
  });
</script>
